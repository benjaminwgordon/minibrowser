// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int                    @id @default(autoincrement())
  email                String                 @unique
  username             String                 @unique
  hash                 String
  posts                Post[]
  // add user avatars later after image uploading is resolved
  UserTagSubscriptions UserTagSubscriptions[]
}

model pendingUser {
  id               Int    @id @default(autoincrement())
  email            String @unique
  username         String @unique
  hash             String
  confirmationCode String
}

model Post {
  id          Int           @id @default(autoincrement())
  title       String
  content     String
  authorId    Int
  author      User          @relation(fields: [authorId], references: [id])
  // miniatureId Int
  //model       Miniature @relation(fields: [miniatureId], references: [id])
  // isWIP       Boolean
  // recipeId    Int?
  // recipe      Recipe? @relation(fields: [recipeId], references: [id])
  description String?
  // consider adding comments in V2
  TagsOnPosts TagsOnPosts[]
}

model Tag {
  id                   Int                    @id @default(autoincrement())
  name                 String                 @unique
  TagsOnPosts          TagsOnPosts[]
  UserTagSubscriptions UserTagSubscriptions[]
}

model TagsOnPosts {
  postId Int
  post   Post @relation(fields: [postId], references: [id])
  tagId  Int
  tag    Tag  @relation(fields: [tagId], references: [id])

  @@id([postId, tagId])
}

model UserTagSubscriptions {
  userId Int
  user   User @relation(fields: [userId], references: [id])
  tagId  Int
  tag    Tag  @relation(fields: [tagId], references: [id])

  @@id([userId, tagId])
}
